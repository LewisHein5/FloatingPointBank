@page "/make-infinite-money"
@inject AccountUpdateService<float> updateService

<h3>Make infinite money</h3>

Last time, we lost money by transferring a tiny amount out of our savings account which was rounded up by a factor of almost 2.
If, instead,  we transfer a slightly smaller amount, it will be rounded to zero and we can unlock a cool wealth-building hack that Big Math doesn't want you to know:

<BankAccount @ref="Savings" TBalance="float" Balance="InitialSavingsBalance" />
<BankAccount @ref="Checking" TBalance="float" Balance="InitialCheckingBalance" />

<TotalBalance TBalance="float" TargetMoney="@(InitialCheckingBalance + InitialSavingsBalance)"></TotalBalance>

@if (BurnedMoney == 0)
{
<b>Click the button to make a transfer</b>
}
@if (BurnedMoney < 0)
{
    <b>Look at that @((-1*BurnedMoney).ToString("C")) of passive incomeðŸ“ˆ</b>
}
<br/>

<button class ="btn btn-primary" @onclick="HandleClick">Transfer $@TransferAmount and watch the magic</button>

<br/>
<br/>

@if (!CollapseExplanation)
{
    <div><h3>What happened?</h3> 
        <p>
            This time, we did the opposite. When we subtract @_initialTransferAmount
            from @InitialSavingsBalance, this is rounded to the nearest floating-point value, which is still
            @InitialSavingsBalance. This is then added to the smaller balance of @InitialCheckingBalance and rounded to @TransferAmount
        </p>
        
        <p>
            Congratulations, you have unlocked passive income.
            You can either <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ&pp=ygUXbmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXA%3D">promote your passive income course</a>
            or <a href="/NonAssociativeMath">go to the next step</a>
        </p>
    </div>
    <br/>
    <div>
        <h3>How do we fix it?</h3>
        Code that deals with floating-point math has to be carefully written reviewed, and tested. Few rules of thumb are universally good,
        but common strategies involve rearranging computations to avoid large intermediate values, choosing types with 
        enough precision to represent our data and our computations, and normalizing values to a more precise range.
        Other strategies include using <a href="https://en.wikipedia.org/wiki/Interval_arithmetic">interval arithmetic</a>
        or, when very slow computation speed is acceptable, <a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">arbitrary-precision arithmetic</a>.
        <br/>
        For further reading see: <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What every computer scientist should know about floating-point arithmetic</a>.
        
    </div>
}

@code
{

    protected override void OnInitialized()
    {
        base.OnInitialized();
        updateService.ClearAccounts();
    }

    BankAccount<float> Savings { get; set; } = new(InitialSavingsBalance);
    BankAccount<float> Checking { get; set; } = new(InitialCheckingBalance);
    public const float InitialSavingsBalance = 1000000f;
    public const float InitialCheckingBalance = 0f;
    private readonly float _initialTransferAmount = float.BitDecrement((InitialSavingsBalance - float.BitDecrement(InitialSavingsBalance)) / 2);
    private double BurnedMoney { get; set; }
    private double TotalMoney { get; set; } = InitialCheckingBalance + InitialSavingsBalance;
    private float TransferAmount => float.BitDecrement((Savings.Balance - float.BitDecrement(Savings.Balance)) / 2);
    [Parameter] public bool CollapseExplanation { get; set; } = true;

    private void HandleClick()
    {
        updateService.Transfer(Savings,Checking, TransferAmount);
        TotalMoney = Savings.Balance + (double)Checking.Balance;
        BurnedMoney = (double)InitialSavingsBalance + InitialCheckingBalance - TotalMoney;
        DisplayExplanation();
    }

    private void DisplayExplanation()
    {
        CollapseExplanation = false;
    }
}