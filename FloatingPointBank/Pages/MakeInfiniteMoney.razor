@page "/make-infinite-money"
@inject AccountUpdateService<float> updateService

<h3>Make infinite money</h3>

Last time, we lost money by transferring a tiny amount out of our savings account which was rounded up by a factor of almost 2.
If, instead,  we transfer a slightly smaller amount, it will be rounded to zero and we can unlock a cool wealth-building hack that Big Math doesn't want you to know:

<BankAccount @ref="Savings" TBalance="float" Balance="InitialSavingsBalance" />
<BankAccount @ref="Checking" TBalance="float" Balance="InitialCheckingBalance" />

<TotalBalance TBalance="float" TargetMoney="@(InitialCheckingBalance + InitialSavingsBalance)"></TotalBalance>

@if (BurnedMoney == 0)
{
<b>Click the button to make a transfer</b>
}
@if (BurnedMoney < 0)
{
    <b>Look at that @((-1*BurnedMoney).ToString("C")) of passive incomeðŸ“ˆ</b>
}
<br/>

<button class ="btn btn-primary" @onclick="HandleClick">Transfer $@TransferAmount and watch the magic</button>

<br/>

@if (!CollapseExplanation)
{
    <div><h3>What happened?</h3> 
        <p>
            This time, we did the opposite. When we subtract @InitialTransferAmount
            from @InitialSavingsBalance, this is rounded to the nearest floating-point value, which is still
            @InitialSavingsBalance. This is then added to the smaller balance of @InitialCheckingBalance and rounded to @TransferAmount
        </p>
        
        <p>
            Congratulations, you have unlocked passive income.
            You can either <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ&pp=ygUXbmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXA%3D">learn how to sell your passive income course to others</a>,
            <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">read more about floating point numbers</a>,
            or <a href="/NonAssociativeMath">Go to the next step</a>
        </p>
    </div>
}

@code
{

    protected override void OnInitialized()
    {
        base.OnInitialized();
        updateService.ClearAccounts();
    }

    BankAccount<float> Savings { get; set; } = new(InitialSavingsBalance);
    BankAccount<float> Checking { get; set; } = new(InitialCheckingBalance);
    public const float InitialSavingsBalance = 1000000f;
    public const float InitialCheckingBalance = 0f;
    public float InitialTransferAmount = float.BitDecrement((InitialSavingsBalance - float.BitDecrement(InitialSavingsBalance)) / 2);
    public double BurnedMoney { get; set; }
    public double TotalMoney { get; set; } = InitialCheckingBalance + InitialSavingsBalance;
    public float TransferAmount => float.BitDecrement((Savings.Balance - float.BitDecrement(Savings.Balance)) / 2);
    [Parameter] public bool CollapseExplanation { get; set; } = true;

    public void HandleClick()
    {
        updateService.Transfer(Savings,Checking, TransferAmount);
        TotalMoney = Savings.Balance + (double)Checking.Balance;
        BurnedMoney = (double)InitialSavingsBalance + InitialCheckingBalance - TotalMoney;
        DisplayExplanation();
    }
    
    public void DisplayExplanation()
    {
        CollapseExplanation = false;
    }
}